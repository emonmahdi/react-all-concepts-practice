import React, { useState, useEffect } from "react";

// тЬЕ REST API Example
const PostList = () => {
  const [posts, setPosts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/posts?_limit=5")
      .then((res) => res.json())
      .then((data) => {
        setPosts(data);
        setLoading(false);
      });
  }, []);

  if (loading) return <p>Loading posts...</p>;
  return (
    <ul className="list-disc pl-6">
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  );
};

// тЬЕ JWT Auth Example
const AuthDemo = () => {
  const [token, setToken] = useState<string | null>(null);

  const handleLogin = async () => {
    // Normally, you'll call backend API
    const fakeToken = "jwt-token-123";
    localStorage.setItem("token", fakeToken);
    setToken(fakeToken);
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    setToken(null);
  };

  return (
    <div className="p-4 border rounded bg-gray-50 space-y-2">
      <h3 className="font-semibold">JWT Auth Demo</h3>
      {token ? (
        <>
          <p>тЬЕ Logged in with token: {token}</p>
          <button onClick={handleLogout} className="px-3 py-1 bg-red-500 text-white rounded">
            Logout
          </button>
        </>
      ) : (
        <button onClick={handleLogin} className="px-3 py-1 bg-green-600 text-white rounded">
          Login
        </button>
      )}
    </div>
  );
};

const Module15 = () => {
  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">ЁЯУМ Module 15: Next Level</h1>

      {/* REST API Integration */}
      <section className="p-4 border rounded bg-gray-50">
        <h2 className="text-xl font-semibold">ЁЯФ╣ REST API Integration</h2>
        <p>
          REST API рж╣рж▓рзЛ client тЖФ server data exchange ржХрж░рж╛рж░ ржЬржиржкрзНрж░рж┐рзЯ ржкржжрзНржзрждрж┐ред React ржП рж╕рж╛ржзрж╛рж░ржгржд{" "}
          <code>fetch</code> ржмрж╛ <code>axios</code> ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред
        </p>
        <PostList />
        <pre className="bg-black text-white p-2 rounded mt-2 text-sm overflow-x-auto">
{`useEffect(() => {
  fetch("/api/posts")
    .then(res => res.json())
    .then(data => setPosts(data));
}, []);`}
        </pre>
      </section>

      {/* GraphQL Basics */}
      <section className="p-4 border rounded bg-gray-50">
        <h2 className="text-xl font-semibold">ЁЯФ╣ GraphQL Basics</h2>
        <p>
          GraphQL рж╣рж▓рзЛ query language ржпрзЗржЦрж╛ржирзЗ client ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзЗ ржмрж▓рзЗ ржжрзЗрзЯ рж╕рзЗ ржХрзЛржи data ржЪрж╛рзЯред REST ржПрж░ ржоржд
          fixed endpoints ржирзЯред
        </p>
        <pre className="bg-black text-white p-2 rounded mt-2 text-sm overflow-x-auto">
{`query {
  user(id: "1") {
    name
    email
  }
}`}
        </pre>
        <p>ЁЯСЙ ржПржЦрж╛ржирзЗ рж╢рзБржзрзБ user ржПрж░ name ржУ email field ржлрзЗржЪ ржХрж░рж╛ рж╣ржмрзЗред</p>
      </section>

      {/* Authentication */}
      <section className="p-4 border rounded bg-gray-50">
        <h2 className="text-xl font-semibold">ЁЯФ╣ Authentication (JWT, OAuth)</h2>
        <p>
          <b>JWT (JSON Web Token)</b> тЖТ token ржнрж┐рждрзНрждрж┐ржХ auth system, ржпрзЗржЦрж╛ржирзЗ client ржХрзЗ ржПржХржЯрж┐ signed token
          ржжрзЗржУрзЯрж╛ рж╣рзЯред <br />
          <b>OAuth</b> тЖТ third-party login (Google, GitHub, Facebook ржЗрждрзНржпрж╛ржжрж┐)ред ржирж┐рж░рж╛ржкржж ржПржмржВ widely usedред
        </p>
        <AuthDemo />
      </section>

      {/* Deployment */}
      <section className="p-4 border rounded bg-gray-50">
        <h2 className="text-xl font-semibold">ЁЯФ╣ Deployment</h2>
        <p>
          React / Next.js project deploy ржХрж░рж╛рж░ ржЬржирзНржп рж╕ржмржЪрзЗрзЯрзЗ ржЬржиржкрзНрж░рж┐рзЯ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо рж╣рж▓рзЛ{" "}
          <b>Vercel</b> (Next.js ржПрж░ ржЬржирзНржп optimized) ржПржмржВ <b>Netlify</b> (CI/CD + Jamstack ready)ред рж╢рзБржзрзБ
          GitHub repo connect ржХрж░рж▓рзЗржЗ CI/CD deploy рж╣рзЯред
        </p>
      </section>

      {/* Practice Task */}
      <section className="p-4 border rounded bg-green-50">
        <h2 className="text-xl font-semibold">ЁЯУЭ Practice Task</h2>
        <ul className="list-disc pl-6">
          <li>JWT ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ simple Auth System ржмрж╛ржирж╛ржУред</li>
          <li>Blog App ржмрж╛ржирж┐рзЯрзЗ Vercel ржП deploy ржХрж░рзЛред</li>
        </ul>
      </section>

      {/* Interview Q&A */}
      <section className="p-4 border rounded bg-yellow-50">
        <h2 className="text-xl font-semibold">ЁЯОп Interview Q&A</h2>

        <p><b>Q:</b> REST ржЖрж░ GraphQL ржПрж░ ржоржзрзНржпрзЗ ржкрж╛рж░рзНржержХрзНржп ржХрзА?</p>
        <p><b>A:</b> REST ржП fixed endpoints ржерж╛ржХрзЗред GraphQL ржП flexible query system ржерж╛ржХрзЗ ржпрзЗржЦрж╛ржирзЗ client ржарж┐ржХ ржХрж░рзЗ ржХрзЛржи data рж▓рж╛ржЧржмрзЗред</p>

        <p><b>Q:</b> JWT ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?</p>
        <p><b>A:</b> Login ржХрж░рж▓рзЗ server ржерзЗржХрзЗ signed token ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред Client рж╕рзЗржЗ token localStorage/cookie рждрзЗ рж░рж╛ржЦрзЗ ржПржмржВ ржкрж░ржмрж░рзНрждрзА request ржП server verify ржХрж░рзЗред</p>

        <p><b>Q:</b> OAuth ржХрзЗржи ржжрж░ржХрж╛рж░?</p>
        <p><b>A:</b> User ржХрзЗ third-party identity provider (Google, GitHub) ржжрж┐рзЯрзЗ authenticate ржХрж░рж╛ ржпрж╛рзЯред ржПржЯрж╛ user-friendly ржПржмржВ ржирж┐рж░рж╛ржкржжред</p>

        <p><b>Q:</b> React App ржХрж┐ржнрж╛ржмрзЗ deploy ржХрж░ржмрзЗ?</p>
        <p><b>A:</b> Vercel/Netlify ржП GitHub repo connect ржХрж░рж▓рзЗ automatic build + deploy рж╣рзЯрзЗ ржпрж╛рзЯред</p>

        <p><b>Q:</b> Critical: JWT token ржХрзЛржерж╛рзЯ store ржХрж░рж╛ ржЙржЪрж┐ржд? ржХрзЗржи?</p>
        <p><b>A:</b> HttpOnly cookie рж╕ржмржЪрзЗрзЯрзЗ ржирж┐рж░рж╛ржкржж ржХрж╛рж░ржг localStorage ржП рж░рж╛ржЦрж▓рзЗ XSS attack ржПрж░ рж╢рж┐ржХрж╛рж░ рж╣рждрзЗ ржкрж╛рж░рзЗред</p>
      </section>
    </div>
  );
};

export default Module15;
