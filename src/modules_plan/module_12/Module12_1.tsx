import React, { createContext, useContext, useState, ReactNode } from "react";

// Type for Theme Context
type Theme = "light" | "dark";
type ThemeContextType = {
  theme: Theme;
  toggleTheme: () => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

const Module12_1 = () => {
  return (
    <div className="p-6 space-y-8">
      {/* Header */}
      <h1 className="text-2xl font-bold text-indigo-600">
        üìå Module 12: TypeScript with React
      </h1>
      <p className="text-gray-700">üëâ Goal: React ‡¶ï‡ßá Type-safe ‡¶ï‡¶∞‡¶æ</p>

      {/* Props Typing */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">1. Props Typing</h2>
        <p className="text-gray-700">
          React ‡¶è TypeScript ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá props ‡¶è‡¶∞ data type ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á define ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
        </p>
        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`type ButtonProps = {
  label: string;
  onClick: () => void;
};

const Button: React.FC<ButtonProps> = ({ label, onClick }) => {
  return <button onClick={onClick}>{label}</button>;
};`}
        </pre>
      </section>

      {/* State Typing */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">2. State Typing</h2>
        <p className="text-gray-700">
          useState ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü generic ‡¶¶‡¶ø‡ßü‡ßá state ‡¶è‡¶∞ ‡¶ü‡¶æ‡¶á‡¶™ declare ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
        </p>
        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`const [count, setCount] = useState<number>(0);
const [name, setName] = useState<string>("Emon");`}
        </pre>
      </section>

      {/* Context Typing */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">3. Context Typing</h2>
        <p className="text-gray-700">
          Context API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶∞ value ‡¶è‡¶¨‡¶Ç function ‡¶è‡¶∞ ‡¶ü‡¶æ‡¶á‡¶™ declare ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§
        </p>
        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`type Theme = "light" | "dark";

type ThemeContextType = {
  theme: Theme;
  toggleTheme: () => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);`}
        </pre>
      </section>

      {/* Custom Hook Typing */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">4. Custom Hooks Typing</h2>
        <p className="text-gray-700">
          Custom hook ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡ßü return type ‡¶è‡¶¨‡¶Ç parameter type define ‡¶ï‡¶∞‡¶æ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø‡•§
        </p>
        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`function useLocalStorage<T>(key: string, initialValue: T) {
  const [value, setValue] = useState<T>(() => {
    const saved = localStorage.getItem(key);
    return saved ? JSON.parse(saved) : initialValue;
  });

  const setStoredValue = (newValue: T) => {
    setValue(newValue);
    localStorage.setItem(key, JSON.stringify(newValue));
  };

  return [value, setStoredValue] as const;
}

// Usage
const [theme, setTheme] = useLocalStorage<"light" | "dark">("theme", "light");`}
        </pre>
      </section>

      {/* Practice Task */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">üéØ Practice Task</h2>
        <ul className="list-disc list-inside text-gray-700 mt-2 space-y-1">
          <li>
            ‡¶è‡¶ï‡¶ü‡¶ø <b>Todo App</b> ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá TypeScript ‡¶¶‡¶ø‡ßü‡ßá todo ‡¶è‡¶∞ ‡¶ü‡¶æ‡¶á‡¶™ define ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
          </li>
          <li>
            ‡¶è‡¶ï‡¶ü‡¶ø <b>Theme Context</b> ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá Context typing + useContext ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá‡•§
          </li>
        </ul>
      </section>

      {/* Interview Questions */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">
          üéØ Interview Questions & Answers
        </h2>
        <div className="space-y-4 mt-2">
          <div>
            <p className="font-semibold text-gray-800">
              Q1: React ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá TypeScript ‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü?
            </p>
            <p className="text-gray-700">
              Ans: Type safety, better autocomplete, bug reduce, developer experience
              improve ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q2: Props typing ‡¶è‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶ï‡ßÄ?
            </p>
            <p className="text-gray-700">
              Ans: ‡¶≠‡ßÅ‡¶≤ ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ props pass ‡¶ï‡¶∞‡¶≤‡ßá compile-time ‡¶è error ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q3: useState ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá TypeScript ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá?
            </p>
            <p className="text-gray-700">
              Ans: useState&lt;Type&gt; ‡¶¶‡¶ø‡ßü‡ßá state ‡¶è‡¶∞ type declare ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶≠‡ßÅ‡¶≤ data set ‡¶®‡¶æ ‡¶π‡ßü‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q4: Context typing ‡¶ï‡ßá‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞?
            </p>
            <p className="text-gray-700">
              Ans: Context value ‡¶è‡¶¨‡¶Ç function ‡¶è‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï type ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶≠‡ßÅ‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶π‡ßü‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q5 (Critical): Generic ‡¶¶‡¶ø‡ßü‡ßá custom hook ‡¶¨‡¶æ‡¶®‡¶æ‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ?
            </p>
            <p className="text-gray-700">
              Ans: Hook reusable ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã type ‡¶è‡¶∞ data handle ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
            </p>
          </div>
        </div>
      </section>

      {/* Problem Solving QnA */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">üß© Problem Solving Q&A</h2>
        <div className="space-y-4 mt-2">
          <div>
            <p className="font-semibold text-gray-800">
              Q1: ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã component ‡¶è ‡¶≠‡ßÅ‡¶≤ props type ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü?
            </p>
            <p className="text-gray-700">
              Ans: Compile-time ‡¶è error ‡¶¶‡¶ø‡¶¨‡ßá, app run ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶á bug detect ‡¶π‡¶¨‡ßá‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q2: Todo app ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡ßü id ‡¶ï‡ßá number ‡¶®‡¶æ string ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá?
            </p>
            <p className="text-gray-700">
              Ans: Project ‡¶è‡¶∞ requirement ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ‡•§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ TypeScript ‡¶è ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá type define ‡¶ï‡¶∞‡¶≤‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q3: Context default value undefined ‡¶π‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶¨‡ßá?
            </p>
            <p className="text-gray-700">
              Ans: useContext ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü conditionally check ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ provider ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
            </p>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Module12_1;
