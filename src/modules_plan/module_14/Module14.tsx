import React, { useState } from "react";

const Counter = () => {
  const [count, setCount] = useState(0);
  return (
    <div className="p-4 border rounded-xl bg-gray-50 space-y-3">
      <h2 className="text-lg font-semibold">Counter: {count}</h2>
      <button
        onClick={() => setCount(count + 1)}
        className="px-3 py-1 bg-green-600 text-white rounded"
      >
        Increment
      </button>
      <button
        onClick={() => setCount(count - 1)}
        className="px-3 py-1 bg-red-600 text-white rounded ml-2"
      >
        Decrement
      </button>
    </div>
  );
};

const Form = () => {
  const [name, setName] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!name.trim()) {
      setError("‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá!");
    } else {
      setError("");
      alert(`Form Submitted: ${name}`);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 border rounded-xl bg-gray-50 space-y-3">
      <input
        type="text"
        value={name}
        placeholder="Enter name"
        onChange={(e) => setName(e.target.value)}
        className="border px-2 py-1 rounded w-full"
      />
      {error && <p className="text-red-600">{error}</p>}
      <button type="submit" className="px-3 py-1 bg-blue-600 text-white rounded">
        Submit
      </button>
    </form>
  );
};

const Module14 = () => {
  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">üìå Module 14: Testing in React</h1>

      {/* Jest & React Testing Library */}
      <section className="p-4 border rounded-xl bg-gray-50">
        <h2 className="text-xl font-semibold">üîπ Jest & React Testing Library</h2>
        <p>
          React Testing Library (RTL) ‡¶π‡¶≤‡ßã React component ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡ßü ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø‡•§ Jest ‡¶π‡¶≤‡ßã
          JavaScript testing framework ‡¶Ø‡ßá‡¶ü‡¶æ assertions, mocks, coverage report ‡¶¶‡ßá‡ßü‡•§
        </p>
      </section>

      {/* Unit Testing */}
      <section className="p-4 border rounded-xl bg-gray-50">
        <h2 className="text-xl font-semibold">üîπ Unit Testing</h2>
        <p>
          Unit Testing ‚Üí ‡¶õ‡ßã‡¶ü ‡¶õ‡ßã‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡¶æ component ‡¶ï‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡•§
        </p>
        <Counter />
        <pre className="bg-black text-white p-2 rounded mt-2 text-sm overflow-x-auto">
{`// Counter.test.tsx
import { render, screen, fireEvent } from "@testing-library/react";
import Counter from "./Counter";

test("increments counter", () => {
  render(<Counter />);
  fireEvent.click(screen.getByText("Increment"));
  expect(screen.getByText(/Counter: 1/i)).toBeInTheDocument();
});`}
        </pre>
      </section>

      {/* Integration Testing */}
      <section className="p-4 border rounded-xl bg-gray-50">
        <h2 className="text-xl font-semibold">üîπ Integration Testing</h2>
        <p>
          Integration Testing ‚Üí ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï component ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡•§
        </p>
        <Form />
        <pre className="bg-black text-white p-2 rounded mt-2 text-sm overflow-x-auto">
{`// Form.test.tsx
import { render, screen, fireEvent } from "@testing-library/react";
import Form from "./Form";

test("shows error when submitting empty input", () => {
  render(<Form />);
  fireEvent.click(screen.getByText("Submit"));
  expect(screen.getByText("‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá!")).toBeInTheDocument();
});`}
        </pre>
      </section>

      {/* Interview Q&A */}
      <section className="p-4 border rounded-xl bg-yellow-50">
        <h2 className="text-xl font-semibold">üéØ Interview Q&A</h2>

        <p><b>Q:</b> Unit test ‡¶Ü‡¶∞ integration test ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø ‡¶ï‡ßÄ?</p>
        <p><b>A:</b> Unit test ‚Üí ‡¶õ‡ßã‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®/component ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡•§ Integration test ‚Üí ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡•§</p>

        <p><b>Q:</b> React Testing Library ‡¶è‡¶∞ ‡¶Æ‡ßÇ‡¶≤ philosophy ‡¶ï‡ßÄ?</p>
        <p><b>A:</b> "Test components the way users use them" ‚Üí DOM interaction, text rendering ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø simulate ‡¶ï‡¶∞‡ßá‡•§</p>

        <p><b>Q:</b> Jest ‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü?</p>
        <p><b>A:</b> Jest ‡¶¶‡¶ø‡ßü‡ßá test runner, mocking, assertions, coverage ‡¶∏‡¶¨ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§</p>

        <p><b>Q:</b> Critical: ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá asynchronous API call test ‡¶ï‡¶∞‡¶¨‡ßá?</p>
        <p><b>A:</b> `findBy...` query ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá async element ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø wait ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ Example:
        {` await screen.findByText(/data loaded/i)`}</p>

        <p><b>Q:</b> Snapshot testing ‡¶ï‡ßÄ?</p>
        <p><b>A:</b> Snapshot testing ‡¶è component ‡¶è‡¶∞ UI ‡¶ï‡ßá snapshot ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá save ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡•§ ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ compare ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§</p>
      </section>
    </div>
  );
};

export default Module14;
