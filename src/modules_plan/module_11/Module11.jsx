
const Module11 = () => {
  return (
    <div className="p-6 space-y-8">
      {/* Header */}
      <h1 className="text-2xl font-bold text-green-600">
        üìå Module 11: Performance Optimization
      </h1>
      <p className="text-gray-700">
        üëâ Goal: React ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡¶ï‡ßá optimize & debug ‡¶ï‡¶∞‡¶æ
      </p>

      {/* React DevTools */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">
          1. React DevTools
        </h2>
        <p className="text-gray-700">
          React DevTools ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø Chrome/Firefox extension ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá React component tree,
          props, state, re-render track ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§ Performance debug ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá useful‡•§
        </p>
      </section>

      {/* Memoization */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">
          2. Memoization (React.memo, useMemo, useCallback)
        </h2>
        <p className="text-gray-700">
          Memoization ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã ‡¶ï‡ßã‡¶®‡ßã computation ‡¶è‡¶∞ result cache ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ï‡¶á
          calculation ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶π‡ßü‡•§
        </p>

        <h3 className="font-semibold text-gray-800 mt-2">üîπ React.memo</h3>
        <p className="text-gray-700">
          ‡¶è‡¶ï‡¶ü‡¶ø HOC ‡¶Ø‡ßá‡¶ü‡¶æ props ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡¶æ ‡¶π‡¶≤‡ßá component re-render ‡¶π‡¶§‡ßá ‡¶¶‡ßá‡ßü ‡¶®‡¶æ‡•§
        </p>
        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`const Child = React.memo(({ value }) => {
  console.log("Child Render");
  return <p>Value: {value}</p>;
});

function App() {
  const [count, setCount] = React.useState(0);
  return (
    <div>
      <Child value="Static Prop" />
      <button onClick={() => setCount(count + 1)}>+</button>
    </div>
  );
}`}
        </pre>

        <h3 className="font-semibold text-gray-800 mt-4">üîπ useMemo</h3>
        <p className="text-gray-700">
          Expensive calculation memoize ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá dependency change ‡¶®‡¶æ ‡¶π‡¶ì‡ßü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§‡•§
        </p>
        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`const App = () => {
  const [num, setNum] = React.useState(0);

  const expensiveCalculation = React.useMemo(() => {
    console.log("Calculating...");
    return num * 2;
  }, [num]);

  return (
    <div>
      <p>Result: {expensiveCalculation}</p>
      <button onClick={() => setNum(num + 1)}>Increase</button>
    </div>
  );
};`}
        </pre>

        <h3 className="font-semibold text-gray-800 mt-4">üîπ useCallback</h3>
        <p className="text-gray-700">
          function ‡¶ï‡ßá memoize ‡¶ï‡¶∞‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá child component unnecessary re-render ‡¶®‡¶æ ‡¶π‡ßü‡•§
        </p>
        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`const Child = React.memo(({ onClick }) => {
  console.log("Child render");
  return <button onClick={onClick}>Click</button>;
});

const App = () => {
  const [count, setCount] = React.useState(0);

  const handleClick = React.useCallback(() => {
    console.log("Clicked");
  }, []);

  return (
    <div>
      <Child onClick={handleClick} />
      <button onClick={() => setCount(count + 1)}>Parent Update</button>
    </div>
  );
};`}
        </pre>
      </section>

      {/* Lazy Loading */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">
          3. Lazy Loading (React.lazy, Suspense)
        </h2>
        <p className="text-gray-700">
          Lazy loading ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã ‡¶ï‡ßã‡¶®‡ßã component ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶§‡¶ñ‡¶®‡¶á ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá ‡¶Ø‡¶ñ‡¶® ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá‡•§ ‡¶è‡¶§‡ßá bundle size ‡¶õ‡ßã‡¶ü ‡¶•‡¶æ‡¶ï‡ßá‡•§
        </p>

        <pre className="bg-black text-green-400 text-sm p-3 rounded mt-3 overflow-x-auto">
{`const LazyComp = React.lazy(() => import("./HeavyComp"));

function App() {
  return (
    <React.Suspense fallback={<p>Loading...</p>}>
      <LazyComp />
    </React.Suspense>
  );
}`}
        </pre>
      </section>

      {/* Code Splitting */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">
          4. Code Splitting
        </h2>
        <p className="text-gray-700">
          Code splitting ‡¶π‡¶≤‡ßã bundle ‡¶ï‡ßá ‡¶õ‡ßã‡¶ü ‡¶õ‡ßã‡¶ü ‡¶≠‡¶æ‡¶ó‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ‡•§ React.lazy, dynamic import()
          ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§ ‡¶è‡¶§‡ßá initial load time ‡¶ï‡¶Æ‡ßá ‡¶Ø‡¶æ‡ßü‡•§
        </p>
      </section>

      {/* Practice Task */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">üéØ Practice Task</h2>
        <ul className="list-disc list-inside text-gray-700 mt-2 space-y-1">
          <li>‡¶è‡¶ï‡¶ü‡¶æ List rendering app ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì, React.memo + useMemo ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá optimize ‡¶ï‡¶∞‡ßã‡•§</li>
          <li>Lazy load images implement ‡¶ï‡¶∞‡ßã (‡¶Ø‡ßá‡¶Æ‡¶® react-lazyload ‡¶¨‡¶æ IntersectionObserver ‡¶¶‡¶ø‡ßü‡ßá)‡•§</li>
        </ul>
      </section>

      {/* Interview Questions */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">
          üéØ Interview Questions & Answers
        </h2>
        <div className="space-y-4 mt-2">
          <div>
            <p className="font-semibold text-gray-800">
              Q1: React DevTools ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü?
            </p>
            <p className="text-gray-700">
              Ans: component tree ‡¶¶‡ßá‡¶ñ‡¶æ, props/state ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ, re-render analyze ‡¶ï‡¶∞‡¶æ‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q2: React.memo ‡¶Ü‡¶∞ useMemo ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø ‡¶ï‡ßÄ?
            </p>
            <p className="text-gray-700">
              Ans: React.memo ‚Üí component re-render optimize ‡¶ï‡¶∞‡ßá‡•§ useMemo ‚Üí expensive calculation memoize ‡¶ï‡¶∞‡ßá‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q3: useCallback ‡¶ï‡ßá‡¶® ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞?
            </p>
            <p className="text-gray-700">
              Ans: function reference ‡¶è‡¶ï‡¶á ‡¶•‡¶æ‡¶ï‡ßá, ‡¶´‡¶≤‡ßá child component unnecessary re-render ‡¶π‡ßü ‡¶®‡¶æ‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q4: Lazy loading ‡¶Ü‡¶∞ code splitting ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶ï‡ßÄ?
            </p>
            <p className="text-gray-700">
              Ans: Code splitting ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã bundle ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ, ‡¶Ü‡¶∞ Lazy loading ‡¶π‡¶≤‡ßã ‡¶∏‡ßá‡¶á ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ code
              ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ load ‡¶ï‡¶∞‡¶æ‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q5 (Critical): React app ‡¶è‡¶∞ performance issue debug ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá?
            </p>
            <p className="text-gray-700">
              Ans: React DevTools profiler, unnecessary re-render ‡¶ö‡ßá‡¶ï, memoization, code splitting
              ‡¶è‡¶¨‡¶Ç network analysis ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
            </p>
          </div>
        </div>
      </section>

      {/* Problem Solving QnA */}
      <section className="bg-gray-50 p-4 rounded-lg shadow">
        <h2 className="text-xl font-semibold text-gray-800">üß© Problem Solving Q&A</h2>
        <div className="space-y-4 mt-2">
          <div>
            <p className="font-semibold text-gray-800">
              Q1: ‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡ßú list render ‡¶ï‡¶∞‡¶≤‡ßá app slow ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§ Optimize ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá?
            </p>
            <p className="text-gray-700">
              Ans: React.memo, useMemo, virtualization (react-window ‡¶¨‡¶æ react-virtualized)
              ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q2: Image heavy app ‡¶è‡¶∞ performance optimize ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶¨‡ßá?
            </p>
            <p className="text-gray-700">
              Ans: Lazy load images, compress ‡¶ï‡¶∞‡¶æ, CDN ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ, responsive image ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡•§
            </p>
          </div>

          <div>
            <p className="font-semibold text-gray-800">
              Q3: Unnecessary re-render detect ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶â‡¶™‡¶æ‡ßü ‡¶ï‡ßÄ?
            </p>
            <p className="text-gray-700">
              Ans: React DevTools Profiler ‡¶¶‡¶ø‡ßü‡ßá trace ‡¶ï‡¶∞‡¶æ, console.log ‡¶¶‡¶ø‡ßü‡ßá child render track ‡¶ï‡¶∞‡¶æ‡•§
            </p>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Module11;
